module.exports = {
    sleep(time) {
        console.log('I\'m', time, 'ms sync delay...');
        var end_time = (new Date()).valueOf() + time;
        var now = new Date();
        while (now.valueOf() < end_time) {
            now = new Date();
        }
    },
    range(start, end, step) {
        const ops = o => Object.prototype.toString.call(o) === '[object Number]'
        if (!ops(start)) return []
        // only start
        if (!ops(end) && !ops(step)) {
            [start, end] = [0, start]
            return [...Array(end).keys()].slice(start, )
        }
        // only start&&end
        if (!ops(step)) {
            return [...Array(end).keys()].slice(start, )
        }
        // arguments all exist
        if (ops(end) && ops(step)) {
            let arr = [...Array(end).keys()].slice(start, )
            let stepArr = []
            for (let a = 0; a < arr.length; a += step) {
                stepArr = [...stepArr, arr[a]]
            }
            return stepArr
        }
    }
}
